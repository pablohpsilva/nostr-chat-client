#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}🔍 Running pre-commit checks...${NC}"

# Check if staged files exist
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -z "$STAGED_FILES" ]; then
  echo "${GREEN}✅ No TypeScript/JavaScript files to check${NC}"
  exit 0
fi

echo "${YELLOW}📝 Checking staged files:${NC}"
echo "$STAGED_FILES"

# =============================================================================
# 1. LINTING
# =============================================================================
echo "\n${YELLOW}🔍 Running ESLint...${NC}"
npx lint-staged

if [ $? -ne 0 ]; then
  echo "${RED}❌ ESLint failed. Please fix the issues and try again.${NC}"
  exit 1
fi

# =============================================================================
# 2. TYPE CHECKING
# =============================================================================
echo "\n${YELLOW}🔧 Running TypeScript check...${NC}"
npx tsc --noEmit

if [ $? -ne 0 ]; then
  echo "${RED}❌ TypeScript check failed. Please fix type errors and try again.${NC}"
  exit 1
fi

# =============================================================================
# 3. FORMATTING CHECK
# =============================================================================
echo "\n${YELLOW}🎨 Checking code formatting...${NC}"
npx prettier --check $STAGED_FILES

if [ $? -ne 0 ]; then
  echo "${YELLOW}⚠️  Code formatting issues found. Auto-fixing...${NC}"
  npx prettier --write $STAGED_FILES
  git add $STAGED_FILES
  echo "${GREEN}✅ Code formatted and staged${NC}"
fi

# =============================================================================
# 4. SECURITY CHECK
# =============================================================================
echo "\n${YELLOW}🔒 Running security checks...${NC}"

# Check for sensitive information
SENSITIVE_PATTERNS=(
  "password\s*=\s*['\"][^'\"]*['\"]"
  "api_key\s*=\s*['\"][^'\"]*['\"]" 
  "secret\s*=\s*['\"][^'\"]*['\"]"
  "token\s*=\s*['\"][^'\"]*['\"]"
  "private_key\s*=\s*['\"][^'\"]*['\"]"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
  if echo "$STAGED_FILES" | xargs grep -l -i -E "$pattern" 2>/dev/null; then
    echo "${RED}❌ Potential sensitive information detected!${NC}"
    echo "Pattern: $pattern"
    echo "Please remove sensitive data and try again."
    exit 1
  fi
done

# Check for TODO/FIXME in production code
if echo "$STAGED_FILES" | xargs grep -l -E "(TODO|FIXME|XXX|HACK)" 2>/dev/null; then
  echo "${YELLOW}⚠️  TODO/FIXME comments found in staged files:${NC}"
  echo "$STAGED_FILES" | xargs grep -n -E "(TODO|FIXME|XXX|HACK)" 2>/dev/null || true
  echo "${YELLOW}Consider resolving these before committing to main/master${NC}"
fi

# =============================================================================
# 5. IMPORT ORGANIZATION
# =============================================================================
echo "\n${YELLOW}📦 Checking import organization...${NC}"

# Check for relative imports that should be absolute
if echo "$STAGED_FILES" | xargs grep -l -E "import.*from ['\"]\.\.\/\.\.\/" 2>/dev/null; then
  echo "${YELLOW}⚠️  Deep relative imports found. Consider using absolute imports with @/ alias${NC}"
  echo "$STAGED_FILES" | xargs grep -n -E "import.*from ['\"]\.\.\/\.\.\/" 2>/dev/null || true
fi

# =============================================================================
# 6. BUNDLE SIZE CHECK (for components)
# =============================================================================
COMPONENT_FILES=$(echo "$STAGED_FILES" | grep -E 'components/.*\.(ts|tsx)$' || true)

if [ ! -z "$COMPONENT_FILES" ]; then
  echo "\n${YELLOW}📊 Checking component file sizes...${NC}"
  
  for file in $COMPONENT_FILES; do
    SIZE=$(wc -l < "$file" 2>/dev/null || echo "0")
    if [ "$SIZE" -gt 300 ]; then
      echo "${YELLOW}⚠️  Large component file: $file ($SIZE lines)${NC}"
      echo "Consider breaking down into smaller components"
    fi
  done
fi

# =============================================================================
# 7. PERFORMANCE CHECK
# =============================================================================
echo "\n${YELLOW}⚡ Running performance checks...${NC}"

# Check for common performance anti-patterns
PERF_PATTERNS=(
  "useState\(\{\)"                    # "Object in useState"
  "useState\(\[\])"                   # "Array in useState"  
  "useEffect\(\(\) => \{[^}]*\}, \[\]\)" # "Empty dependency array with complex effect"
)

for pattern in "${PERF_PATTERNS[@]}"; do
  if echo "$STAGED_FILES" | xargs grep -l -E "$pattern" 2>/dev/null; then
    echo "${YELLOW}⚠️  Potential performance issue found:${NC}"
    echo "Pattern: $pattern"
    echo "$STAGED_FILES" | xargs grep -n -E "$pattern" 2>/dev/null || true
    echo "Consider optimization techniques (useMemo, useCallback, etc.)"
  fi
done

# =============================================================================
# SUCCESS
# =============================================================================
echo "\n${GREEN}✅ All pre-commit checks passed!${NC}"
echo "${GREEN}🚀 Ready to commit${NC}"

exit 0
